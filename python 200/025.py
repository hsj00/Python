# Bit operator

bit1 = 0x61
bit2 = 0x61

print(hex(bit1 & bit2))
print(hex(bit1 | bit2))
print(hex(bit1 ^ bit2))
print(hex(bit1 >> 1))
print(hex(bit1 << 2))

"""
a: 0110 0001
b: 0110 0010

a & b: 0110 0000    -> 두 개의 비트가 다를 경우 0
a | b: 0110 0011    -> 두 개의 비트가 다를 경우 1
a ^ b: 0000 0011    -> 두 개의 비트가 같을 경우 0, 다를 경우 1

a >> n: 오른쪽으로 n만큼 쉬프트, 오른쪽 비트는 없어지고 왼쪽 비트는 0으로 채워진다
ex) a >> 1: 0011 0000

a << n: 왼쪽으로 n만큼 쉬프트, 1이 시작되기 전까지 왼쪽 비트는 없어지고 오른쪽 비트는 0으로 채워진다, 이동하는 왼쪽 비트가 1인 경우엔 그 값이 보존
ex) a << 2: 0001 1000 0100
"""

# lower 4bit extract from 1byte
a = 107         # 0x6b -> 0110 1011
b = a & 0x0f    # 0110 1011 & 0000 1111
print(b)        # 0000 1011 (0x0b)

# upper 4bit extract from 1byte
a = 107             # 0x6b -> 0110 1011
b = a >> 4 & 0x0f   # 0110 1011 -> 0000 0110 // 0000 0110 & 0000 1111
print(b)            # 0000 0110 (0x06)
